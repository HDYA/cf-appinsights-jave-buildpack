#!/usr/bin/env ruby

require 'fileutils'
require 'rexml/document'
include REXML

puts "Application Insights buildpack"

@poms = Array.new()
@gradles = Array.new()
@first_folder_with_source_code = nil

# Search through source code
path_queue = Queue.new()
path_queue << ARGV[1]

while !path_queue.empty?
    path = path_queue.pop()

    Dir.foreach(path) {|e|
        if e == "." || e == ".." || e == "target" then
            next
        end
        if path.end_with? "/" then
            _f = path + e
        else
            _f = path + '/' + e
        end
        if File.directory? _f then
            path_queue << _f
            next
        end
        if e == "pom.xml" then
            puts "Found pom.xml at #{_f}"

            @poms << _f
        end
        if e == "build.gradle" then
            puts "Found build.gradle at #{_f}"

            @gradles << _f
        end
        if (@first_folder_with_source_code == nil) && (e.end_with? ".java") then
            @first_folder_with_source_code = path
        end
    }
end

springframework = false

if @poms.empty? then
    puts "No pom.xml found for injecting maven dependencies."
else
    # build dependency element
    dependency = Element.new('dependency')
    dependency.add_element('groupId')
    dependency.add_element('artifactId')
    dependency.add_element('version')
    dependency.elements['groupId'].text = 'com.microsoft.azure'
    dependency.elements['artifactId'].text = 'applicationinsights-web'
    dependency.elements['version'].text = '[2.0,)'

    # build repository element
    repository = Element.new('repository')
    repository.add_element('id')
    repository.add_element('name')
    repository.add_element('url')
    repository.elements['id'].text = 'central'
    repository.elements['name'].text = 'central'
    repository.elements['url'].text = 'http://repo1.maven.org/maven2'

    puts "Updating pom.xml"
    @poms.each{|pom|
        puts 'Inserting dependencies for Application Insights into' + pom

        # read pom.xml
        file = File.open(pom, 'r')
        doc = Document.new(file)

        # create <dependencies> node if not exist
        dependencies = doc.root.elements['dependencies']
        if !dependencies then
            dependencies = Element.new('dependencies')
            doc.root.add_element(dependencies)
        end

        # add dependency to pom if not exist
        dependency_exist = false
        dependencies.each_element() { |current_dependency|
            if current_dependency.elements['artifactId'].include? 'applicationinsights-web' then
                puts "Application Insights dependency exist in " + pom + ", skipping"
                dependency_exist = true
            elsif current_dependency.elements['artifactId'].include? 'spring-boot-starter-web' then
                puts "Spring Framework dependency detected in " + pom
                springframework = true
            end
        }
        if !dependency_exist then
            dependencies.add_element(dependency)
        end

        # create <repositories> node if not exist
        repositories = doc.root.elements['repositories']
        if !repositories then
            repositories = Element.new('repositories')
            doc.root.add_element(repositories)
        end

        # add repository to pom if not exist
        repository_exist = false
        repositories.each_element() { |current_repository|
            if current_repository.elements['id'] == 'central' then
                repository_exist = true
            end
        }
        if !repository_exist then
            repositories.add_element(repository)
        end

        # write back
        file = File.open(pom, 'w')
        doc.write(file, 4)
    }
end

if @gradles.empty? then
    puts "No build.gradle found for injecting geadle dependencies."
else
    maven_central_repository_test_regex = /repositories[^{]*{[^}]*mavenCentral\(\)/
    maven_central_repository_replace_regex = /(repositories[^{]*{)([\W]*)((\})*})/
    maven_central_repository = "\\1\\2mavenCentral()\\2\\3"
    application_insights_dependency_test_regex = /dependencies[^{]*{[^}]*applicationinsights/
    application_insights_dependency_replace_regex = /(dependencies[^{]*{)([ \t\r\n]*)([^}]*})/
    application_insights_dependency = "\\1\\2compile group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '2.+'\\2\\3"
    springframework_dependency_test_regex = /dependencies[^{]*{[^}]*org.springframework/

    def brace_delta(content, index)
        substring = content[0..index]
        return substring.count('{') - substring.count('}')
    end

    @gradles.each do |current_file|
        puts "Injecting dependencies for Application Insights to " + current_file
        content = File.read(current_file)

        if content.match(springframework_dependency_test_regex) then
            puts "Spring Framework dependency detected in " + current_file
            springframework = true
        end

        print "Adding maven Central repository... "
        content = content.gsub(maven_central_repository_replace_regex) { |current_content|
            brace_delta(content, Regexp.last_match.offset(0).first) <= 0 && !current_content.match(maven_central_repository_test_regex) ? current_content.gsub(maven_central_repository_replace_regex, maven_central_repository) : current_content
        }
        print "done.\n"

        print "Adding Application Insights compile group ... "
        content = content.gsub(application_insights_dependency_replace_regex) { |current_content|
            brace_delta(content, Regexp.last_match.offset(0).first) <= 0 && !current_content.match(application_insights_dependency_test_regex) ? current_content.gsub(application_insights_dependency_replace_regex, application_insights_dependency) : current_content
        }
        print "done.\n"

        print "Writing back to " + current_file + " ... "
        File.open(current_file, "w") {|file| file.puts content }
        print "done\n"
    end
end

# copy ApplicationInsights.xml
print 'Inserting ApplicationInsights.xml ... '
FileUtils.cp(ARGV[0] + '/resources/ApplicationInsights.xml', ARGV[1] + '/src/main/resources/')
print "done.\n"

# copy AppInsightsConfig.java
if springframework then
    source_code_folder_base_pattern = "/src/main/java/"
    application_insights_config_class_package_placeholder = "APPLICATION_INSIGHTS_CONFIG_CLASS_PACKAGE_PLACEHOLDER"

    application_insights_config_class_location = @first_folder_with_source_code + "/applicationinsights"
    application_insights_config_class_package_name = application_insights_config_class_location[application_insights_config_class_location.rindex(source_code_folder_base_pattern) + source_code_folder_base_pattern.length .. -1].gsub(/\//, '.')

    print 'Inserting AppInsightsConfig.java to ' + application_insights_config_class_location + ' ... '
    FileUtils.mkdir_p(application_insights_config_class_location)

    file = File.open(ARGV[0] + '/resources/AppInsightsConfig.java', 'r')
    content = File.read(file)
    content = content.gsub(application_insights_config_class_package_placeholder, application_insights_config_class_package_name)
    File.open(application_insights_config_class_location + "/AppInsightsConfig.java", "w") {|file| file.puts content }

    print "done.\n"
end

puts 'Instrucmentation of Application Insights completed'
